[{"title":"RocketMQ集群部署（2m-2s-async模式）","date":"2021-06-01T02:28:40.000Z","url":"/posts/d91bf2fe/","tags":[["RocketMQ","/tags/RocketMQ/"],["分布式集群","/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/"]],"categories":[["RocketMQ","/categories/RocketMQ/"],["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":" 集群模式：双主双从的同步集群模式（2m-2s-async） 1. 准备环境1.1 服务器 使用两台 Linux(centos7) 的服务器模拟集群 序号 IP 角色 服务 端口 1 192.168.56.113 NameServer NameServer 9876 Broker Master1 10909,10911,10912 Slave2 10909,10911,10912 2 192.168.56.114 NameServer NameServer 9876 Broker Master2 10909,10911,10912 Slave1 10909,10911,10912 1.2 rocketMQ 版本：4.4.0 下载地址：官方下载 其他历史版本 安装rocketMQ需要JDK1.8(64)位或以上的java环境 解压并移动到/usr/local文件夹下 目录结构： 1.3 关闭防火墙 宿主机需要远程访问虚拟机的服务时，需要开放相关端口，或者直接关闭防火墙 直接关闭防火墙命令 或者只开放需要的端口（更安全） 需要开放的端口： 9876：NameServer注册端口 10909：vip通道端口 10911：接受客户端连接的监听端口 10912：Master监听Slaver开放的端口 重置防火墙 查看开放的端口列表 2. 集群搭建2.1 Broker配置属性详解 属性 说明 brokerClusterName 所属集群名字，默认值 DefaultCluster brokerName Broker 的名称，不同的broker配置文件值不能相同 brokerId broker id, 0 表示 master, 其他的正整数表示 slave namesrvAddr NameServer地址，多个以分号分隔 brokerIP1 当前broker监听的IP,一般会自动识别本机ip，但在多网卡的情况下可能会识别错误 brokerIP2 存在主从 broker 时，如果在 broker 主节点上配置了 brokerIP2 属性，broker 从节点会连接主节点配置的 brokerIP2 进行同步 defaultTopicQueueNums 创建topic时默认的队列数量，默认值 4 autoCreateTopicEnable 是否允许 Broker 自动创建Topic，建议线上关闭 autoCreateSubscriptionGroup 是否允许 Broker 自动创建订阅组，建议线上关闭 listenPort 接受客户端连接的监听端口，默认值 10911 haListenPort 表示Master监听Slave请求的端口,默认为服务端口+1 deleteWhen 在每天的什么时间删除已经超过文件保留时间的 commit log，默认凌晨 4点 fileReservedTime 以小时计算的文件保留时间，默认值72 mapedFileSizeCommitLog commitLog每个文件的大小，默认1G mapedFileSizeConsumeQueue ConsumeQueue每个文件默认存30W条，根据业务情况调整 destroyMapedFileIntervalForcibly 默认值 1000 * 120 redeleteHangedFileInterval 默认值 1000 * 120 diskMaxUsedSpaceRatio 检测物理文件磁盘空间 storePathRootDir 存储根目录 storePathCommitLog 存储 commit log 的路径 storePathConsumeQueue 存储 consume queue 的路径 storePathIndex 消息索引存储路径 storeCheckpoint checkpoint 文件存储路径 abortFile abort 文件存储路径 maxMessageSize 消息的最大长度，默认值：1024 * 1024 * 4，单位：字节 flushCommitLogLeastPages 刷新 CommitLog 时要刷新多少页，默认4 flushConsumeQueueLeastPages 刷新消费队列时要刷新多少页，默认2 flushCommitLogThoroughInterval 默认值 1000 * 10 flushConsumeQueueThoroughInterval 默认值 1000 * 60 brokerRole Broker 的角色，默认值 ASYNC_MASTER- ASYNC_MASTER 异步复制Master- SYNC_MASTER 同步双写Master- SLAVE flushDiskType 刷盘方式，默认 ASYNC_FLUSH- ASYNC_FLUSH 异步刷盘，broker 利用刷盘一组消息的模式，可以取得更好的性能- SYNC_FLUSH 同步刷盘，broker 保证在收到确认生产者之前将消息刷盘 checkTransactionMessageEnable sendMessageThreadPoolNums 发送线程个数，建议配置成 Cpu 核数 pullMessageThreadPoolNums 拉消息线程池数量 更多其他属性请参考MessageStoreConfig 2.2 修改Broker配置文件1. master1服务器：192.168.56.113 修改配置如下： 2. slaver2服务器：192.168.56.113 修改配置如下： 3. master2服务器：192.168.56.114 修改配置如下： 4. slaver1服务器：192.168.56.114 修改配置如下： 5. 配置文件小结 同一集群下，brokerClusterName字段（所属集群名字）值必须一致 brokerName 字段（Broker名称）值，对于不同的配置文件不能相同，但Master及其对应的Slaver可以保持一致 storePathRootDir等存储目录字段，一般情况下会保持一致，但是由于此次为每台虚拟机启动两个Broker进程，若存储目录保持一致会导致启动失败，所以这里Master和Slaver的消息存储目录的路径是不相同的 RocketMQ存储目录的字段配置后，使用配置文件作为参数启动时，若文件不存在，则会自动创建文件 2.3 修改启动脚本 RocketMQ默认JVM配置过大，启动服务前需要修改其配置 1) runbroker.sh ​ 需要根据内存大小进行适当的对JVM参数进行调整： 2) runserver.sh 2.4 服务启动1) 启动 NameServer 集群 分别在 192.168.56.113 和 192.168.56.114 上启动 NameServer 2) 启动 Broker 集群 在192.168.56.113 上启动 master1 和 slaver2 在192.168.56.114 上启动 master2 和 slaver1 查看启动状态 端口说明： 9876：NameServer服务注册端口 10909：vip通道的监听端口 10911：Master监听端口 10912：Master监听Slave请求的端口 3. 集群监控平台搭建 RocketMQ有一个对其扩展的开源项目rocketmq-externals，其中的rocketmq-console子模块便是RocketMQ的控制台管理项目了 下载项目： 没有安装git可以直接去github下载 rocketmq-externals 进入 rocketmq-console 目录: 修改NameServer集群配置： 打开cmd，并执行打包命令： 打包完成后的jar包就在 rocketmq-console/target目录下了，可以直接在本地运行，也可以复制到虚拟机上运行，运行命令： 也可以在后台运行 部署完成后就可以通过浏览器访问8080端口来查看自己部署的RocketMQ集群了，其他使用可以参考官方中文文档 4. 其他资料 Apache RocketMQ开发者指南 mqadmin管理工具官方中文文档 RocketMQ 代码测试样例 RocketMQ单机部署 "},{"title":"RocketMQ单机部署（单Master模式）","date":"2021-05-27T02:55:12.000Z","url":"/posts/f415c3c0/","tags":[["RocketMQ","/tags/RocketMQ/"],["单Master","/tags/%E5%8D%95Master/"]],"categories":[["RocketMQ","/categories/RocketMQ/"],["学习笔记","/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":" 单master模式一般用于本地测试，不建议线上环境使用，一旦broker宕机或者重启，会导致整个服务不可用 1. 环境准备 Linux centos7 JDK 1.8 RocketMQ 4.8.0 安装包：下载地址 2. 安装并启动1. 解压 将RocketMQ压缩包解压并移动到/usr/local目录下 以下命令都视作在RocketMQ的根目录下执行 2. 启动 NameServer nohup=&gt;不挂断地运行命令；&amp;=&gt;在后台运行；一般两个一起用，nohup command &amp; 3. 启动 Broker 初次启动问题：RocketMQ默认配置的启动内存较大，启动时很有可能会因为内存不足而启动失败，所以启动Broker之前需要修改以下文件： 修改bin/runbroker.sh文件 修改bin/runserver.sh文件 启动完成后可使用 jps 出命令查看是否启动成功 jps 命令是由jdk提供的，可以显示当前所有java进程 4. 测试 使用官方demo测试 RocketMQ 发送消息： 接收消息： 执行成功的话会打印出一堆密密麻麻的消息 5. 关闭 RocketMQ 3. Java代码测试1. 修改配置 现在我们需要对RocketMQ的配置文件进行修改 修改文件：conf/broker.conf 创建消息存储路径（配置了之后文件夹应该会自动创建，如果没有自动创建文件夹的话可以手动创建一下）： 2. 修改防火墙简单粗暴，直接关闭防火墙 或者只开放需要的端口（更安全） 需要开放三个端口：9876（NameServer注册端口） 10909（生产者发送消息的端口）10911（消费者接收消息的端口） 参数说明： --zone=public 作用域 --add-port=9876/tcp 开放的端口和访问类型，需要关闭端口的话就用：--remove-port=9876/tcp --permanent 永久生效，指重启防火墙之后配仍然生效。使用此参数需要重新加载防火墙 重置防火墙 查看开放的端口列表 3. 重新启动RocketMQ此处启动 NameServer 时和上面一样，但是启动 Broker 时需要使用刚刚修改的配置文件 -n localhost:9876 =&gt; 由于 Broker 需要注册在 NameServer 上，这里指向的是 NameServer 的地址，默认端口为9876 -c conf/broker.conf =&gt; 这里指向的是上面修改的配置文件路径（相对路径和绝对路径都可以），不带上这个的话rocketMQ启动时不会使用刚刚修改的配置文件 4. 添加pom依赖 终于到了代码环节，依赖似乎并没有什么版本的限制，用最新的4.8.0应该也可以 5. Consumer 类 6. Producer 类 7. 测试 消费者和生产者的代码是官方的示例代码，此处只是进行一个简单的测试，生产端发送一个Topic为TopicTest的同步消息，消费端消费TopicTest主题的消息 启动main方法进行测试 到此就全部完成了！想要了解其他 RocketMQ 的常见用法可以参考官方示例 4. 命令汇总启动 NameServer 查看 NameServer 日志 启动Broker 查看 Broker 日志 关闭 NameServer 和 Broker 查看 RocketMQ 服务运行状态 "}]