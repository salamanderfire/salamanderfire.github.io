[{"title":"RocketMQ集群搭建","date":"2021-05-27T07:36:40.000Z","url":"/2021/05/27/1398490663250694144/","tags":[["RocketMQ","/tags/RocketMQ/"],["分布式集群","/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4/"]],"categories":[["RocketMQ","/categories/RocketMQ/"]],"content":"RocketMQ集群搭建 集群模式：双主双从的集群模式（同步） 1. 准备环境1.1 服务器 序号 IP 角色 架构模式 1 192.168.56.113 nameserver、brokerserver Master1、Slave2 2 192.168.56.114 nameserver、brokerserver Master2、Slave1 1.2 rocketMQ 版本：4.4.0 下载地址：官方下载 其他历史版本 安装rocketMQ需要JDK1.8(64)位或以上的java环境 解压并移动到/usr/local文件夹下 目录结构："},{"title":"RocketMQ单Master模式搭建","date":"2021-05-27T02:55:12.000Z","url":"/2021/05/27/1398490750005678080/","tags":[["RocketMQ","/tags/RocketMQ/"],["单Master","/tags/%E5%8D%95Master/"]],"categories":[["RocketMQ","/categories/RocketMQ/"]],"content":" 单master模式一般用于本地测试，不建议线上环境使用，一旦broker宕机或者重启，会导致整个服务不可用 1. 环境准备 Linux centos7 JDK 1.8 RocketMQ 4.8.0 安装包：下载地址 2. 安装并启动1. 解压 将RocketMQ压缩包解压并移动到/usr/local目录下 以下命令都视作在RocketMQ的根目录下执行 2. 启动 NameServer nohup=&gt;不挂断地运行命令；&amp;=&gt;在后台运行；一般两个一起用，nohup command &amp; 3. 启动 Broker 初次启动问题：RocketMQ默认配置的启动内存较大，启动时很有可能会因为内存不足而启动失败，所以启动Broker之前需要修改以下文件： 修改bin/runbroker.sh文件 修改bin/runserver.sh文件 启动完成后可使用 jps 出命令查看是否启动成功 jps 命令是由jdk提供的，可以显示当前所有java进程 4. 测试 使用官方demo测试 RocketMQ 发送消息： 接收消息： 执行成功的话会打印出一堆密密麻麻的消息 5. 关闭 RocketMQ 3. Java代码测试1. 修改配置 现在我们需要对RocketMQ的配置文件进行修改 修改文件：conf/broker.conf 创建消息存储路径（配置了之后文件夹应该会自动创建，如果没有自动创建文件夹的话可以手动创建一下）： 2. 修改防火墙简单粗暴，直接关闭防火墙 或者只开放需要的端口（更安全） 需要开放三个端口：9876（NameServer注册端口） 10909（生产者发送消息的端口）10911（消费者接收消息的端口） 参数说明： --zone=public 作用域 --add-port=9876/tcp 开放的端口和访问类型，需要关闭端口的话就用：--remove-port=9876/tcp --permanent 永久生效，指重启防火墙之后配仍然生效。使用此参数需要重新加载防火墙 重置防火墙 查看开放的端口列表 3. 重新启动RocketMQ此处启动 NameServer 时和上面一样，但是启动 Broker 时需要使用刚刚修改的配置文件 -n localhost:9876 =&gt; 由于 Broker 需要注册在 NameServer 上，这里指向的是 NameServer 的地址，默认端口为9876 -c conf/broker.conf =&gt; 这里指向的是上面修改的配置文件路径（相对路径和绝对路径都可以），不带上这个的话rocketMQ启动时不会使用刚刚修改的配置文件 4. 添加pom依赖 终于到了代码环节，依赖似乎并没有什么版本的限制，用最新的4.8.0应该也可以 5. Consumer 类 6. Producer 类 7. 测试 消费者和生产者的代码是官方的示例代码，此处只是进行一个简单的测试，生产端发送一个Topic为TopicTest的同步消息，消费端消费TopicTest主题的消息 启动main方法进行测试 到此就全部完成了！想要了解其他 RocketMQ 的常见用法可以参考官方示例 4. 命令汇总启动 NameServer 查看 NameServer 日志 启动Broker 查看 Broker 日志 关闭 NameServer 和 Broker 查看 RocketMQ 服务运行状态 "}]